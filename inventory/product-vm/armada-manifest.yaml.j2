---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: helm-toolkit
data:
  chart_name: helm-toolkit
  release: helm-toolkit
  namespace: helm-tookit
  values: {}
  source:
    type: local
    location: "{{ osh_infra_path }}"
    subpath: helm-toolkit
  dependencies: []
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: ingress
data:
  chart_name: ingress
  release: ingress
  namespace: openstack
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
  values:
    images:
      tags:
        entrypoint: {{ docker_registry }}/kubernetes-entrypoint:v0.3.0
        ingress: {{ docker_registry }}/nginx-ingress-controller:0.20.0
        ingress_module_init: {{ docker_registry }}/pike/ubuntu-source-neutron-server:3.6.0
        ingress_routed_vip: {{ docker_registry }}/pike/ubuntu-source-neutron-server:3.6.0
        error_pages: {{ docker_registry }}/defaultbackend:1.0
        keepalived: {{ docker_registry }}/keepalived:1.4.5
        dep_check: {{ docker_registry }}/kubernetes-entrypoint:v0.3.0
        image_repo_sync: {{ docker_registry }}/docker:17.07.0
      pull_policy: Always
    network:
      host_namespace: true
    monitoring:
      prometheus:
        enabled: true
        ingress_exporter:
          scrape: true
        config:
          worker-processes: "8"
    config:
      worker-processes: "8"
    pod:
      replicas:
        ingress: 1
        error_page: 1
  source:
    type: local
    location: "{{ osh_infra_path }}"
    subpath: ingress
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: ceph-provisioners
data:
  chart_name: ceph-provisioners
  release: ceph-provisioners
  namespace: openstack
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
  values:
    images:
      tags:
        ceph_bootstrap: {{ docker_registry }}/ceph-daemon:tag-build-master-luminous-ubuntu-16.04
        ceph_cephfs_provisioner: {{ docker_registry }}/cephfs-provisioner:v0.1.1
        ceph_config_helper: {{ docker_registry }}/ceph-config-helper:v1.10.3
        ceph_rbd_provisioner: {{ docker_registry }}/rbd-provisioner:v0.1.1
        dep_check: {{ docker_registry }}/kubernetes-entrypoint:v0.3.1
        image_repo_sync: {{ docker_registry }}/docker:17.07.0
      pull_policy: IfNotPresent
    deployment:
      ceph: false
      client_secrets: true
      rbd_provisioner: false
      cephfs_provisioner: false
    storageclass:
      rbd:
        provision_storage_class: false
      cephfs:
        provision_storage_class: false
    conf:
      ceph:
        global:
          mon_host: "{{ mon_host }}"
    manifests:
      configmap_bin: false
      configmap_bin_common: false
      configmap_etc: true
      deployment_rbd_provisioner: false
      deployment_cephfs_provisioner: false
      job_bootstrap: false
      job_cephfs_client_key: false
      job_image_repo_sync: false
      job_namespace_client_key_cleaner: false
      job_namespace_client_key: false
      storageclass_cephfs: false
      storageclass_rbd: false
  source:
    type: local
    location: "{{ osh_infra_path }}"
    subpath: ceph-provisioners
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: mariadb
data:
  chart_name: mariadb
  release: mariadb
  namespace: openstack
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
  values:
    images:
      tags:
        mariadb: {{ docker_registry }}/mariadb:10.2.18
        ingress: {{ docker_registry }}/nginx-ingress-controller:0.9.0
        error_pages: {{ docker_registry }}/defaultbackend:1.0
        prometheus_create_mysql_user: {{ docker_registry }}/mariadb:10.2.13
        prometheus_mysql_exporter: {{ docker_registry }}/mysqld-exporter:v0.10.0
        prometheus_mysql_exporter_helm_tests: {{ docker_registry }}/heat:pike
        dep_check: {{ docker_registry }}/kubernetes-entrypoint:v0.3.1
        image_repo_sync: docker.io/docker:17.07.0
      pull_policy: Always
    pod:
      replicas:
        server: 3
    volume:
      enabled: true
      class_name: rbd
    monitoring:
      prometheus:
        enabled: true
        mysqld_exporter:
          scrape: true
    endpoints:
      oslo_db:
        auth:
          admin:
            username: {{ db_root_user }}
            password: {{ db_root_password }}
  source:
    type: local
    location: "{{ osh_infra_path }}"
    subpath: mariadb
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: etcd
data:
  chart_name: etcd
  release: etcd
  namespace: openstack
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
  values:
    images:
      tags:
        etcd: {{ docker_registry }}/etcd-amd64:2.2.5
        image_repo_sync: {{ docker_registry }}/docker:17.07.0
        dep_check: {{ docker_registry }}/kubernetes-entrypoint:v0.3.1
      pull_policy: IfNotPresent
    pod:
      replicas:
        etcd: 1
  source:
    type: local
    location: "{{ osh_infra_path }}"
    subpath: etcd
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: rabbitmq
data:
  chart_name: rabbitmq
  release: rabbitmq
  namespace: openstack
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
  values:
    images:
      tags:
        rabbitmq: {{ docker_registry }}/rabbitmq:3.7.4
        dep_check: {{ docker_registry }}/kubernetes-entrypoint:v0.3.1
        prometheus_rabbitmq_exporter: {{ docker_registry }}/rabbitmq-exporter:v0.21.0
        image_repo_sync: {{ docker_registry }}/docker:17.07.0
        scripted_test: {{ docker_registry }}/rabbitmq:3.7.4-management
        prometheus_rabbitmq_exporter_helm_tests: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
      pull_policy: IfNotPresent
    pod:
      replicas:
        server: 3
    volume:
      class_name: rbd
    monitoring:
      prometheus:
        enabled: true
        rabbitmq_exporter:
          scrape: true
  source:
    type: local
    location: "{{ osh_infra_path }}"
    subpath: rabbitmq
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: memcached
data:
  chart_name: memcached
  release: memcached
  namespace: openstack
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
  values:
    images:
      tags:
        memcached: {{ docker_registry }}/memcached:1.5.5
        dep_check: {{ docker_registry }}/kubernetes-entrypoint:v0.3.1
        prometheus_memcached_exporter: {{ docker_registry }}/memcached-exporter:v0.4.1
        image_repo_sync: {{ docker_registry }}/docker:17.07.0
      pull_policy: IfNotPresent
    pod:
      replicas:
        server: 1
    monitoring:
      prometheus:
        enabled: true
        memcached_exporter:
          scrape: true
  source:
    type: local
    location: "{{ osh_infra_path }}"
    subpath: memcached
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: libvirt
data:
  chart_name: libvirt
  release: libvirt
  namespace: openstack
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
  values:
    release_group: null
    images:
      tags:
        image_repo_sync: {{ docker_registry }}/docker:17.07.0
        dep_check: {{ docker_registry }}/kubernetes-entrypoint:v0.3.1
        libvirt: {{ docker_registry }}/libvirt:ubuntu-xenial-1.3.1-1ubuntu10.24
      pull_policy: Always
    network:
      backend:
        - openvswitch
    conf:
      ceph:
        enabled: true
        admin_keyring: "{{ admin_keyring }}"
        cinder:
          user: "cinder"
          keyring: "AQASDcJacIJVDhAA5wrtpnBWsRMXQ27sw6uwjQ=="
          secret_uuid: "582393ff-9a5c-4a2e-ae0d-86ec18c36afc"
      libvirt:
        listen_addr: 0.0.0.0
        log_level: 3
    manifests:
      configmap_bin: true
      configmap_etc: true
      daemonset_libvirt: true
  source:
    type: local
    location: "{{ osh_infra_path }}"
    subpath: libvirt
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: openvswitch
data:
  chart_name: openvswitch
  release: openvswitch
  namespace: openstack
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
  values:
    release_group: null
    images:
      tags:
        openvswitch_db_server: {{ docker_registry }}/pike/ubuntu-source-openvswitch-db-server:0.1.0
        openvswitch_vswitchd: {{ docker_registry }}/pike/ubuntu-source-openvswitch-vswitchd:0.1.0
        dep_check: {{ docker_registry }}/kubernetes-entrypoint:v0.3.1
        image_repo_sync: {{ docker_registry }}/docker:17.07.0
      pull_policy: Always
  source:
    type: local
    location: "{{ osh_infra_path }}"
    subpath: openvswitch
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: keystone
data:
  chart_name: keystone
  release: keystone
  namespace: openstack
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
    pre:
      delete:
        - name: keystone-bootstrap
          type: job
          labels:
            application: keystone
            component: bootstrap
        - name: keystone-credential-setup
          type: job
          labels:
            application: keystone
            component: credential-setup
        - name: keystone-db-init
          type: job
          labels:
            application: keystone
            component: db-init
        - name: keystone-db-sync
          type: job
          labels:
            application: keystone
            component: db-sync
        - name: keystone-fernet-setup
          type: job
          labels:
            application: keystone
            component: fernet-setup
        - name: keystone-domain-manage
          type: job
          labels:
            application: keystone
            component: domain-manage
  values:
    images:
      tags:
        bootstrap: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        test: {{ docker_registry }}/pike/ubuntu-source-rally:3.6.0
        db_init: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        keystone_db_sync: {{ docker_registry }}/pike/ubuntu-source-keystone:3.6.0
        db_drop: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        ks_user: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        rabbit_init: {{ docker_registry }}/rabbitmq:3.7-management
        keystone_fernet_setup: {{ docker_registry }}/pike/ubuntu-source-keystone:3.6.0
        keystone_fernet_rotate: {{ docker_registry }}/pike/ubuntu-source-keystone:3.6.0
        keystone_credential_setup: {{ docker_registry }}/pike/ubuntu-source-keystone:3.6.0
        keystone_credential_rotate: {{ docker_registry }}/pike/ubuntu-source-keystone:3.6.0
        keystone_api: {{ docker_registry }}/pike/ubuntu-source-keystone:3.6.0
        keystone_domain_manage: {{ docker_registry }}/pike/ubuntu-source-keystone:3.6.0
        dep_check: {{ docker_registry }}/kubernetes-entrypoint:v0.3.1
        image_repo_sync: {{ docker_registry }}/docker:17.07.0
      pull_policy: Always
    conf:
      keystone:
        DEFAULT:
          debug: true
{% raw %}
      wsgi_keystone: |
        {{- $portInt := tuple "identity" "internal" "api" $ | include "helm-toolkit.endpoints.endpoint_port_lookup" }}

        Listen 0.0.0.0:{{ $portInt }}

        LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
        LogFormat "%{X-Forwarded-For}i %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" proxy

        SetEnvIf X-Forwarded-For "^.*\..*\..*\..*" forwarded
        CustomLog /dev/stdout combined env=!forwarded
        CustomLog /dev/stdout proxy env=forwarded

        <VirtualHost *:{{ $portInt }}>
            WSGIDaemonProcess keystone-public processes=5 threads=5 user=keystone group=keystone display-name=%{GROUP}
            WSGIProcessGroup keystone-public
            WSGIScriptAlias / /var/www/cgi-bin/keystone/keystone-wsgi-public
            WSGIApplicationGroup %{GLOBAL}
            WSGIPassAuthorization On
            <IfVersion >= 2.4>
              ErrorLogFormat "%{cu}t %M"
            </IfVersion>
            ErrorLog /dev/stdout

            SetEnvIf X-Forwarded-For "^.*\..*\..*\..*" forwarded
            CustomLog /dev/stdout combined env=!forwarded
            CustomLog /dev/stdout proxy env=forwarded
        </VirtualHost>
{% endraw %}
    pod:
      user:
        keystone:
          uid: 42425
      replicas:
        api: 3
    endpoints:
      oslo_db:
        auth:
          admin:
            username: {{ db_root_user }}
            password: {{ db_root_password }}
          keystone:
            username: keystone
            password: {{ db_keystone_password }}
  source:
    type: local
    location: "{{ osh_path }}"
    subpath: keystone
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: glance
data:
  chart_name: glance
  release: glance
  namespace: openstack
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
    pre:
      delete:
        - name: glance-bootstrap
          type: job
          labels:
            application: glance
            component: bootstrap
        - name: glance-storage-init
          type: job
          labels:
            application: glance
            component: storage-init
        - name: glance-db-init
          type: job
          labels:
            application: glance
            component: db-init
        - name: glance-db-sync
          type: job
          labels:
            application: glance
            component: db-sync
        - name: glance-ks-endpoints
          type: job
          labels:
            application: glance
            component: ks-endpoints
        - name: glance-ks-service
          type: job
          labels:
            application: glance
            component: ks-service
        - name: glance-ks-user
          type: job
          labels:
            application: glance
            component: ks-user
  values:
    storage: rbd
    images:
      tags:
        test: {{ docker_registry }}/pike/ubuntu-source-rally:3.6.0
        glance_storage_init: {{ docker_registry }}/ceph-config-helper:v1.10.3
        db_init: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        glance_db_sync: {{ docker_registry }}/pike/ubuntu-source-glance-api:3.6.0
        db_drop: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        ks_user: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        ks_service: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        ks_endpoints: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        rabbit_init: {{ docker_registry }}/rabbitmq:3.7-management
        glance_api: {{ docker_registry }}/pike/ubuntu-source-glance-api:3.6.0
        glance_registry: {{ docker_registry }}/pike/ubuntu-source-glance-registry:3.6.0
        bootstrap: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        dep_check: {{ docker_registry }}/kubernetes-entrypoint:v0.3.1
        image_repo_sync: {{ docker_registry }}/docker:17.07.0
      pull_policy: Always
    pod:
      replicas:
        api: 3
        registry: 3
      user:
        glance:
          uid: 42415
    network:
      api:
        ingress:
          annotations:
            nginx.ingress.kubernetes.io/proxy-body-size: 102400M
    conf:
      ceph:
        enabled: true
        admin_keyring: "{{ admin_keyring }}"
      glance:
        glance_store:
          rbd_store_user: glance
          rbd_store_pool: images
        DEFAULT:
          show_image_direct_url: true
          workers: 8
    bootstrap:
      enabled: false
      structured:
        images:
          cirros:
            id: 201084fc-c276-4744-8504-cb974dbb3610
            private: false
    endpoints:
      oslo_db:
        auth:
          admin:
            username: {{ db_root_user }}
            password: {{ db_root_password }}
          glance:
            username: glance
            password: {{ db_glance_password }}
  source:
    type: local
    location: "{{ osh_path }}"
    subpath: glance
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: nova
data:
  chart_name: nova
  release: nova
  namespace: openstack
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
    pre:
      delete:
        - name: nova-bootstrap
          type: job
          labels:
            application: nova
            component: bootstrap
        - name: nova-cell-setup
          type: job
          labels:
            application: nova
            component: cell-setup
        - name: nova-db-init
          type: job
          labels:
            application: nova
            component: db-init
        - name: nova-db-sync
          type: job
          labels:
            application: nova
            component: db-sync
        - name: nova-ks-endpoints
          type: job
          labels:
            application: nova
            component: ks-endpoints
        - name: nova-ks-service
          type: job
          labels:
            application: nova
            component: ks-service
        - name: nova-ks-user
          type: job
          labels:
            application: nova
            component: ks-user
        - name: placement-ks-endpoints
          type: job
          labels:
            application: placement
            component: ks-endpoints
        - name: placement-ks-service
          type: job
          labels:
            application: placement
            component: ks-service
        - name: placement-ks-user
          type: job
          labels:
            application: placement
            component: ks-user
  values:
    images:
      tags:
        test: {{ docker_registry }}/pike/ubuntu-source-rally:3.6.0
        db_drop: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        db_init: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        ks_user: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        ks_service: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        ks_endpoints: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        nova_api: {{ docker_registry }}/pike/ubuntu-source-nova-api:3.6.0
        nova_cell_setup: {{ docker_registry }}/pike/ubuntu-source-nova-api:3.6.0
        nova_cell_setup_init: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        nova_compute: {{ docker_registry }}/pike/ubuntu-source-nova-compute:3.6.0
        nova_compute_ironic: {{ docker_registry }}/pike/ubuntu-source-nova-compute-ironic:3.6.0
        nova_compute_ssh: {{ docker_registry }}/pike/ubuntu-source-nova-ssh:3.6.0
        nova_conductor: {{ docker_registry }}/pike/ubuntu-source-nova-conductor:3.6.0
        nova_consoleauth: {{ docker_registry }}/pike/ubuntu-source-nova-consoleauth:3.6.0
        nova_db_sync: {{ docker_registry }}/pike/ubuntu-source-nova-api:3.6.0
        nova_novncproxy: {{ docker_registry }}/pike/ubuntu-source-nova-novncproxy:3.6.0
        nova_novncproxy_assets: {{ docker_registry }}/pike/ubuntu-source-nova-novncproxy:3.6.0
        nova_placement: {{ docker_registry }}/pike/ubuntu-source-nova-placement-api:3.6.0
        nova_scheduler: {{ docker_registry }}/pike/ubuntu-source-nova-scheduler:3.6.0
        nova_spiceproxy: {{ docker_registry }}/pike/ubuntu-source-nova-spicehtml5proxy:3.6.0
        nova_spiceproxy_assets: {{ docker_registry }}/pike/ubuntu-source-nova-spicehtml5proxy:3.6.0
        bootstrap: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        dep_check: {{ docker_registry }}/kubernetes-entrypoint:v0.3.1
        image_repo_sync: {{ docker_registry }}/docker:17.07.0
        rabbit_init: {{ docker_registry }}/rabbitmq:3.7-management
        nova_service_cleaner: {{ docker_registry }}/ceph-config-helper:v1.10.3
      pull_policy: Always
    bootstrap:
      structured:
        flavors:
          enabled: true
          options:
            m1_tiny:
              id: 0c84e220-a258-439f-a6ff-f8e9fd980025
    network:
      backend:
        - openvswitch
      novncproxy:
        name: "nova-novncproxy"
        node_port:
          enabled: true
          port: 30608
        port: 6080
        targetPort: 6080
    conf:
      libvirt:
        live_migration_interface: eth0
      rootwrap_filters:
        api_metadata:
          override:
          append:
        compute:
          override: |
            # nova-rootwrap command filters for compute nodes
            # This file should be owned by (and only-writeable by) the root user
            [Filters]
            # nova/virt/disk/mount/api.py: 'kpartx', '-a', device
            # nova/virt/disk/mount/api.py: 'kpartx', '-d', device
            kpartx: CommandFilter, kpartx, root
            # nova/virt/xenapi/vm_utils.py: tune2fs, -O ^has_journal, part_path
            # nova/virt/xenapi/vm_utils.py: tune2fs, -j, partition_path
            tune2fs: CommandFilter, tune2fs, root
            # nova/virt/disk/mount/api.py: 'mount', mapped_device
            # nova/virt/disk/api.py: 'mount', '-o', 'bind', src, target
            # nova/virt/xenapi/vm_utils.py: 'mount', '-t', 'ext2,ext3,ext4,reiserfs'..
            # nova/virt/configdrive.py: 'mount', device, mountdir
            mount: CommandFilter, mount, root
            # nova/virt/disk/mount/api.py: 'umount', mapped_device
            # nova/virt/disk/api.py: 'umount' target
            # nova/virt/xenapi/vm_utils.py: 'umount', dev_path
            # nova/virt/configdrive.py: 'umount', mountdir
            umount: CommandFilter, umount, root
            # nova/virt/disk/mount/nbd.py: 'qemu-nbd', '-c', device, image
            # nova/virt/disk/mount/nbd.py: 'qemu-nbd', '-d', device
            qemu-nbd: CommandFilter, qemu-nbd, root
            # nova/virt/disk/mount/loop.py: 'losetup', '--find', '--show', image
            # nova/virt/disk/mount/loop.py: 'losetup', '--detach', device
            losetup: CommandFilter, losetup, root
            # nova/virt/disk/vfs/localfs.py: 'blkid', '-o', 'value', '-s', 'TYPE', device
            blkid: CommandFilter, blkid, root
            # nova/virt/libvirt/utils.py: 'blockdev', '--getsize64', path
            # nova/virt/disk/mount/nbd.py: 'blockdev', '--flushbufs', device
            blockdev: RegExpFilter, blockdev, root, blockdev, (--getsize64|--flushbufs), /dev/.*
            # nova/virt/disk/vfs/localfs.py: 'tee', canonpath
            # nova/virt/libvirt/guest.py: 'tee',
            # nova/virt/libvirt/vif.py: utils.execute('tee',
            tee: CommandFilter, tee, root
            # nova/virt/disk/vfs/localfs.py: 'mkdir', canonpath
            mkdir: CommandFilter, mkdir, root
            # nova/virt/disk/vfs/localfs.py: 'chown'
            # nova/virt/libvirt/utils.py: def chown(): execute('chown', owner, path,
            # nova/virt/libvirt/driver.py: 'chown', os.getuid( console_log
            # nova/virt/libvirt/driver.py: 'chown', os.getuid( console_log
            # nova/virt/libvirt/driver.py: 'chown', 'root', basepath('disk')
            chown: CommandFilter, chown, root
            # nova/virt/disk/vfs/localfs.py: 'chmod'
            chmod: CommandFilter, chmod, root
            # nova/virt/libvirt/vif.py: 'ip', 'tuntap', 'add', dev, 'mode', 'tap'
            # nova/virt/libvirt/vif.py: 'ip', 'link', 'set', dev, 'up'
            # nova/virt/libvirt/vif.py: 'ip', 'link', 'delete', dev
            # nova/network/linux_net.py: 'ip', 'addr', 'add', str(floating_ip)+'/32'i..
            # nova/network/linux_net.py: 'ip', 'addr', 'del', str(floating_ip)+'/32'..
            # nova/network/linux_net.py: 'ip', 'addr', 'add', '169.254.169.254/32',..
            # nova/network/linux_net.py: 'ip', 'addr', 'show', 'dev', dev, 'scope',..
            # nova/network/linux_net.py: 'ip', 'addr', 'del/add', ip_params, dev)
            # nova/network/linux_net.py: 'ip', 'addr', 'del', params, fields[-1]
            # nova/network/linux_net.py: 'ip', 'addr', 'add', params, bridge
            # nova/network/linux_net.py: 'ip', '-f', 'inet6', 'addr', 'change', ..
            # nova/network/linux_net.py: 'ip', 'link', 'set', 'dev', dev, 'promisc',..
            # nova/network/linux_net.py: 'ip', 'link', 'add', 'link', bridge_if ...
            # nova/network/linux_net.py: 'ip', 'link', 'set', interface, address,..
            # nova/network/linux_net.py: 'ip', 'link', 'set', interface, 'up'
            # nova/network/linux_net.py: 'ip', 'link', 'set', bridge, 'up'
            # nova/network/linux_net.py: 'ip', 'addr', 'show', 'dev', interface, ..
            # nova/network/linux_net.py: 'ip', 'link', 'set', dev, address, ..
            # nova/network/linux_net.py: 'ip', 'link', 'set', dev, 'up'
            # nova/network/linux_net.py: 'ip', 'route', 'add', ..
            # nova/network/linux_net.py: 'ip', 'route', 'del', .
            # nova/network/linux_net.py: 'ip', 'route', 'show', 'dev', dev
            ip: CommandFilter, ip, root
            # nova/virt/libvirt/vif.py: 'tunctl', '-b', '-t', dev
            # nova/network/linux_net.py: 'tunctl', '-b', '-t', dev
            tunctl: CommandFilter, tunctl, root
            # nova/virt/libvirt/vif.py: 'ovs-vsctl', ...
            # nova/virt/libvirt/vif.py: 'ovs-vsctl', 'del-port', ...
            # nova/network/linux_net.py: 'ovs-vsctl', ....
            ovs-vsctl: CommandFilter, ovs-vsctl, root
            # nova/network/linux_net.py: 'ivs-ctl', ....
            ivs-ctl: CommandFilter, ivs-ctl, root
            # nova/virt/libvirt/vif.py: 'vrouter-port-control', ...
            vrouter-port-control: CommandFilter, vrouter-port-control, root
            # nova/virt/libvirt/vif.py: 'ebrctl', ...
            ebrctl: CommandFilter, ebrctl, root
            # nova/virt/libvirt/vif.py: 'mm-ctl', ...
            mm-ctl: CommandFilter, mm-ctl, root
            # nova/network/linux_net.py: 'ovs-ofctl', ....
            ovs-ofctl: CommandFilter, ovs-ofctl, root
            # nova/virt/libvirt/driver.py: 'dd', if=%s % virsh_output, ...
            dd: CommandFilter, dd, root
            # nova/virt/xenapi/volume_utils.py: 'iscsiadm', '-m', ...
            iscsiadm: CommandFilter, iscsiadm, root
            # nova/virt/libvirt/volume/aoe.py: 'aoe-revalidate', aoedev
            # nova/virt/libvirt/volume/aoe.py: 'aoe-discover'
            aoe-revalidate: CommandFilter, aoe-revalidate, root
            aoe-discover: CommandFilter, aoe-discover, root
            # nova/virt/xenapi/vm_utils.py: parted, --script, ...
            # nova/virt/xenapi/vm_utils.py: 'parted', '--script', dev_path, ..*.
            parted: CommandFilter, parted, root
            # nova/virt/xenapi/vm_utils.py: 'pygrub', '-qn', dev_path
            pygrub: CommandFilter, pygrub, root
            fdisk: CommandFilter, fdisk, root
            # nova/virt/disk/api.py: e2fsck, -f, -p, image
            e2fsck: CommandFilter, e2fsck, root
            # nova/virt/disk/api.py: resize2fs, image
            resize2fs: CommandFilter, resize2fs, root
            iptables-save: CommandFilter, iptables-save, root
            ip6tables-save: CommandFilter, ip6tables-save, root
            # nova/network/linux_net.py: 'ip[6]tables-restore' % (cmd,)
            iptables-restore: CommandFilter, iptables-restore, root
            ip6tables-restore: CommandFilter, ip6tables-restore, root
            # nova/network/linux_net.py: 'arping', '-U', floating_ip, '-A', '-I', ...
            # nova/network/linux_net.py: 'arping', '-U', network_ref['dhcp_server'],..
            arping: CommandFilter, arping, root
            # nova/network/linux_net.py: 'dhcp_release', dev, address, mac_address
            dhcp_release: CommandFilter, dhcp_release, root
            # nova/network/linux_net.py: 'kill', '-9', pid
            # nova/network/linux_net.py: 'kill', '-HUP', pid
            kill_dnsmasq: KillFilter, root, /usr/sbin/dnsmasq, -9, -HUP
            # nova/network/linux_net.py: 'kill', pid
            kill_radvd: KillFilter, root, /usr/sbin/radvd
            # nova/network/linux_net.py: dnsmasq call
            dnsmasq: EnvFilter, env, root, CONFIG_FILE=, NETWORK_ID=, dnsmasq
            # nova/network/linux_net.py: 'radvd', '-C', '%s' % _ra_file(dev, 'conf'..
            radvd: CommandFilter, radvd, root
            # nova/network/linux_net.py: 'brctl', 'addbr', bridge
            # nova/network/linux_net.py: 'brctl', 'setfd', bridge, 0
            # nova/network/linux_net.py: 'brctl', 'stp', bridge, 'off'
            # nova/network/linux_net.py: 'brctl', 'addif', bridge, interface
            brctl: CommandFilter, brctl, root
            # nova/virt/libvirt/utils.py: 'mkswap'
            # nova/virt/xenapi/vm_utils.py: 'mkswap'
            mkswap: CommandFilter, mkswap, root
            # nova/virt/libvirt/utils.py: 'nova-idmapshift'
            nova-idmapshift: CommandFilter, nova-idmapshift, root
            # nova/virt/xenapi/vm_utils.py: 'mkfs'
            # nova/utils.py: 'mkfs', fs, path, label
            mkfs: CommandFilter, mkfs, root
            # nova/virt/libvirt/utils.py: 'qemu-img'
            qemu-img: CommandFilter, qemu-img, root
            # nova/virt/disk/vfs/localfs.py: 'readlink', '-e'
            readlink: CommandFilter, readlink, root
            # nova/virt/disk/api.py:
            mkfs.ext3: CommandFilter, mkfs.ext3, root
            mkfs.ext4: CommandFilter, mkfs.ext4, root
            mkfs.ntfs: CommandFilter, mkfs.ntfs, root
            # nova/virt/libvirt/driver.py:
            lvremove: CommandFilter, lvremove, root
            # nova/virt/libvirt/utils.py:
            lvcreate: CommandFilter, lvcreate, root
            # nova/virt/libvirt/utils.py:
            lvs: CommandFilter, lvs, root
            # nova/virt/libvirt/utils.py:
            vgs: CommandFilter, vgs, root
            # nova/utils.py: read_file_as_root: 'cat', file_path
            # (called from nova/virt/disk/vfs/localfs.py:VFSLocalFS.read_file)
            read_passwd: RegExpFilter, cat, root, cat, (/var|/usr)?/tmp/openstack-vfs-localfs[^/]+/etc/passwd
            read_shadow: RegExpFilter, cat, root, cat, (/var|/usr)?/tmp/openstack-vfs-localfs[^/]+/etc/shadow
            # os-brick needed commands
            read_initiator: ReadFileFilter, /etc/iscsi/initiatorname.iscsi
            multipath: CommandFilter, multipath, root
            # multipathd show status
            multipathd: CommandFilter, multipathd, root
            systool: CommandFilter, systool, root
            vgc-cluster: CommandFilter, vgc-cluster, root
            # os_brick/initiator/connector.py
            drv_cfg: CommandFilter, /opt/emc/scaleio/sdc/bin/drv_cfg, root, /opt/emc/scaleio/sdc/bin/drv_cfg, --query_guid
            # TODO(smcginnis) Temporary fix.
            # Need to pull in os-brick os-brick.filters file instead and clean
            # out stale brick values from this file.
            scsi_id: CommandFilter, /lib/udev/scsi_id, root
            # os_brick.privileged.default oslo.privsep context
            # This line ties the superuser privs with the config files, context name,
            # and (implicitly) the actual python code invoked.
            privsep-rootwrap: RegExpFilter, privsep-helper, root, privsep-helper, --config-file, /etc/(?!\.\.).*, --privsep_context, os_brick.privileged.default, --privsep_sock_path, /tmp/.*
            # nova/virt/libvirt/storage/dmcrypt.py:
            cryptsetup: CommandFilter, cryptsetup, root
            # nova/virt/xenapi/vm_utils.py:
            xenstore-read: CommandFilter, xenstore-read, root
            # nova/virt/libvirt/utils.py:
            rbd: CommandFilter, rbd, root
            # nova/virt/libvirt/utils.py: 'shred', '-n3', '-s%d' % volume_size, path
            shred: CommandFilter, shred, root
            # nova/virt/libvirt/volume/volume.py: 'cp', '/dev/stdin', delete_control..
            cp: CommandFilter, cp, root
            # nova/virt/xenapi/vm_utils.py:
            sync: CommandFilter, sync, root
            # nova/virt/libvirt/imagebackend.py:
            ploop: RegExpFilter, ploop, root, ploop, restore-descriptor, .*
            prl_disk_tool: RegExpFilter, prl_disk_tool, root, prl_disk_tool, resize, --size, .*M$, --resize_partition, --hdd, .*
            # nova/virt/libvirt/utils.py:
            ploop: RegExpFilter, ploop, root, ploop, init, -s, .*, -f, .*, -t, .*, .*
            # nova/virt/libvirt/utils.py: 'xend', 'status'
            xend: CommandFilter, xend, root
            # nova/virt/libvirt/utils.py:
            touch: CommandFilter, touch, root
            # nova/virt/libvirt/volume/vzstorage.py
            pstorage-mount: CommandFilter, pstorage-mount, root
          append:
        network:
          override:
          append:
      ceph:
        enabled: true
        admin_keyring: "{{ admin_keyring }}"
        cinder:
          user: "cinder"
          keyring: "AQASDcJacIJVDhAA5wrtpnBWsRMXQ27sw6uwjQ=="
          secret_uuid: "582393ff-9a5c-4a2e-ae0d-86ec18c36afc"
      rally_tests:
        run_tempest: false
        tests:
          NovaSecGroup.create_and_delete_secgroups: []
          NovaSecGroup.create_and_list_secgroups: []
          NovaSecGroup.create_and_update_secgroups: []
          NovaAgents.list_agents:
            - runner:
                concurrency: 1
                times: 1
                type: constant
              sla:
                failure_rate:
                  max: 0
          NovaAggregates.create_and_get_aggregate_details:
            - args:
                availability_zone: nova
              runner:
                concurrency: 1
                times: 1
                type: constant
              sla:
                failure_rate:
                  max: 0
          NovaAggregates.create_and_update_aggregate:
            - args:
                availability_zone: nova
              runner:
                concurrency: 1
                times: 1
                type: constant
              sla:
                failure_rate:
                  max: 0
          NovaAggregates.list_aggregates:
            - runner:
                concurrency: 1
                times: 1
                type: constant
              sla:
                failure_rate:
                  max: 0
          NovaAvailabilityZones.list_availability_zones:
            - args:
                detailed: true
              runner:
                concurrency: 1
                times: 1
                type: constant
              sla:
                failure_rate:
                  max: 0
          NovaFlavors.create_and_delete_flavor:
            - args:
                disk: 1
                ram: 500
                vcpus: 1
              runner:
                concurrency: 1
                times: 1
                type: constant
              sla:
                failure_rate:
                  max: 0
          NovaFlavors.create_and_list_flavor_access:
            - args:
                disk: 1
                ram: 500
                vcpus: 1
              runner:
                concurrency: 1
                times: 1
                type: constant
              sla:
                failure_rate:
                  max: 0
          NovaFlavors.create_flavor:
            - args:
                disk: 1
                ram: 500
                vcpus: 1
              runner:
                concurrency: 1
                times: 1
                type: constant
              sla:
                failure_rate:
                  max: 0
          NovaFlavors.create_flavor_and_add_tenant_access:
            - args:
                disk: 1
                ram: 500
                vcpus: 1
              runner:
                concurrency: 1
                times: 1
                type: constant
              sla:
                failure_rate:
                  max: 0
          NovaFlavors.create_flavor_and_set_keys:
            - args:
                disk: 1
                extra_specs:
                  'quota:disk_read_bytes_sec': 10240
                ram: 500
                vcpus: 1
              runner:
                concurrency: 1
                times: 1
                type: constant
              sla:
                failure_rate:
                  max: 0
          NovaFlavors.list_flavors:
            - args:
                detailed: true
              runner:
                concurrency: 1
                times: 1
                type: constant
              sla:
                failure_rate:
                  max: 0
          NovaHosts.list_hosts:
            - runner:
                concurrency: 1
                times: 1
                type: constant
              sla:
                failure_rate:
                  max: 0
          NovaHypervisors.list_and_get_hypervisors:
            - args:
                detailed: true
              runner:
                concurrency: 1
                times: 1
                type: constant
              sla:
                failure_rate:
                  max: 0
          NovaHypervisors.list_and_get_uptime_hypervisors:
            - args:
                detailed: true
              runner:
                concurrency: 1
                times: 1
                type: constant
              sla:
                failure_rate:
                  max: 0
          NovaHypervisors.list_and_search_hypervisors:
            - args:
                detailed: true
              runner:
                concurrency: 1
                times: 1
                type: constant
              sla:
                failure_rate:
                  max: 0
          NovaHypervisors.list_hypervisors:
            - args:
                detailed: true
              runner:
                concurrency: 1
                times: 1
                type: constant
              sla:
                failure_rate:
                  max: 0
          NovaHypervisors.statistics_hypervisors:
            - args: {}
              runner:
                concurrency: 1
                times: 1
                type: constant
              sla:
                failure_rate:
                  max: 0
          NovaImages.list_images:
            - args:
                detailed: true
              runner:
                concurrency: 1
                times: 1
                type: constant
              sla:
                failure_rate:
                  max: 0
          NovaKeypair.create_and_delete_keypair:
            - runner:
                concurrency: 1
                times: 1
                type: constant
              sla:
                failure_rate:
                  max: 0
          NovaKeypair.create_and_list_keypairs:
            - runner:
                concurrency: 1
                times: 1
                type: constant
              sla:
                failure_rate:
                  max: 0
          NovaServerGroups.create_and_list_server_groups:
            - args:
                all_projects: false
                kwargs:
                  policies:
                    - affinity
              runner:
                concurrency: 1
                times: 1
                type: constant
              sla:
                failure_rate:
                  max: 0
          NovaServices.list_services:
            - runner:
                concurrency: 1
                times: 1
                type: constant
              sla:
                failure_rate:
                  max: 0
      nova:
        DEFAULT:
          scheduler_default_filters: "RetryFilter,AvailabilityZoneFilter,RamFilter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,ServerGroupAntiAffinityFilter,ServerGroupAffinityFilter"
          debug: true
          config_drive_cdrom: false
          config_drive_format: "vfat"
          force_config_drive: true
          osapi_compute_workers: 8
        vnc:
          novncproxy_base_url: http://{{ hostvars[groups['controller-node'][0]]['ip'] }}:30608/vnc_auto.html
        libvirt:
          virt_type: qemu
          rbd_user: "cinder"
          rbd_secret_uuid: "582393ff-9a5c-4a2e-ae0d-86ec18c36afc"
        scheduler:
          discover_hosts_in_cells_interval: 60
    endpoints:
      oslo_db_cell0:
        path: /nova_cell0
      oslo_db:
        auth:
          admin:
            username: {{ db_root_user }}
            password: {{ db_root_password }}
          nova:
            username: nova
            password: {{ db_nova_password }}
      oslo_db_api:
        auth:
          admin:
            username: {{ db_root_user }}
            password: {{ db_root_password }}
          nova:
            username: nova
            password: {{ db_nova_password }}
      oslo_db_cell0:
        auth:
          admin:
            username: {{ db_root_user }}
            password: {{ db_root_password }}
          nova:
            username: nova
            password: {{ db_nova_password }}
    pod:
      user:
        nova:
          uid: 42436
      replicas:
        api_metadata: 3
        osapi: 3
        conductor: 3
        consoleauth: 3
        scheduler: 3
        novncproxy: 3
  source:
    type: local
    location: "{{ osh_path }}"
    subpath: nova
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: neutron
data:
  chart_name: neutron
  release: neutron
  namespace: openstack
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
    pre:
      delete:
        - name: neutron-db-init
          type: job
          labels:
            application: neutron
            component: db-init
        - name: neutron-db-sync
          type: job
          labels:
            application: neutron
            component: db-sync
        - name: neutron-ks-endpoints
          type: job
          labels:
            application: neutron
            component: ks-endpoints
        - name: neutron-ks-service
          type: job
          labels:
            application: neutron
            component: ks-service
        - name: neutron-ks-user
          type: job
          labels:
            application: neutron
            component: ks-user
  values:
    images:
      tags:
        bootstrap: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        test: {{ docker_registry }}/pike/ubuntu-source-rally:3.6.0
        db_init: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        neutron_db_sync: {{ docker_registry }}/pike/ubuntu-source-neutron-server:3.6.0
        db_drop: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        ks_user: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        ks_service: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        ks_endpoints: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        neutron_server: {{ docker_registry }}/pike/ubuntu-source-neutron-server:3.6.0
        neutron_dhcp: {{ docker_registry }}/pike/ubuntu-source-neutron-dhcp-agent:3.6.0
        neutron_metadata: {{ docker_registry }}/pike/ubuntu-source-neutron-metadata-agent:3.6.0
        neutron_l3: {{ docker_registry }}/pike/ubuntu-source-neutron-l3-agent:3.6.0
        neutron_openvswitch_agent: {{ docker_registry }}/pike/ubuntu-source-neutron-openvswitch-agent:3.6.0
        neutron_linuxbridge_agent: {{ docker_registry }}/pike/ubuntu-source-neutron-linuxbridge-agent:3.6.0
        neutron_sriov_agent: {{ docker_registry }}/pike/ubuntu-source-neutron-sriov-agent:3.6.0
        neutron_sriov_agent_init: {{ docker_registry }}/pike/ubuntu-source-neutron-sriov-agent:3.6.0
        rabbit_init: {{ docker_registry }}/rabbitmq:3.7-management
        image_repo_sync: {{ docker_registry }}/docker:17.07.0
        dep_check: {{ docker_registry }}/kubernetes-entrypoint:v0.3.1
      pull_policy: Always
    pod:
      replicas:
        server: 3
      user:
        neutron:
          uid: 42435
    network:
      auto_bridge_add:
        br-ex: eth1
      share_namespaces: false
      interface:
        tunnel: eth0
    conf:
      neutron_sudoers: |
        # This sudoers file supports rootwrap-daemon for both Kolla and LOCI Images.
        Defaults !requiretty
        Defaults secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:/var/lib/openstack/bin:/var/lib/kolla/venv/bin"
        neutron ALL = (root) NOPASSWD: /var/lib/kolla/venv/bin/neutron-rootwrap /etc/neutron/rootwrap.conf *, /var/lib/openstack/bin/neutron-rootwrap /etc/neutron/rootwrap.conf *, /var/lib/kolla/venv/bin/neutron-rootwrap-daemon /etc/neutron/rootwrap.conf, /var/lib/openstack/bin/neutron-rootwrap-daemon /etc/neutron/rootwrap.conf
      neutron:
        DEFAULT:
          debug: True
          core_plugin: ml2
          l3_ha: True
          # NOTE: change mtu to 9000 if jumbo frame is supported
          global_physnet_mtu: 1500
          service_plugins: router
          interface_driver: openvswitch
        agent:
          root_helper_daemon: sudo neutron-rootwrap-daemon /etc/neutron/rootwrap.conf
      plugins:
        ml2_conf:
          ml2:
            mechanism_drivers: openvswitch,l2population
            type_drivers: flat, vxlan
            tenant_network_types: vxlan
        openvswitch_agent:
          agent:
            tunnel_types: vxlan
            l2_population: True
            arp_responder: True
          ovs:
            bridge_mappings: "external:br-ex"
          securitygroup:
            firewall_driver: openvswitch
    manifests:
      daemonset_lb_agent: false
      daemonset_dhcp_agent: true
      daemonset_metadata_agent: false
      daemonset_ovs_agent: true
      daemonset_sriov_agent: false
      daemonset_l3_agent: true
  source:
    type: local
    location: "{{ osh_path }}"
    subpath: neutron
  dependencies:
    - helm-toolkit
  test:
    enabled: false
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: cinder
data:
  chart_name: cinder
  release: cinder
  namespace: openstack
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
    pre:
      delete:
        - name: cinder-bootstrap
          type: job
          labels:
            application: cinder
            component: bootstrap
        - name: cinder-db-init
          type: job
          labels:
            application: cinder
            component: db-init
        - name: cinder-db-sync
          type: job
          labels:
            application: cinder
            component: db-sync
        - name: cinder-ks-endpoints
          type: job
          labels:
            application: cinder
            component: ks-endpoints
        - name: cinder-ks-service
          type: job
          labels:
            application: cinder
            component: ks-service
        - name: cinder-ks-user
          type: job
          labels:
            application: cinder
            component: ks-user
  values:
    images:
      tags:
        test: {{ docker_registry }}/pike/ubuntu-source-rally:3.6.0
        db_init: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        cinder_db_sync: {{ docker_registry }}/pike/ubuntu-source-cinder-api:3.6.0
        db_drop: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        rabbit_init: {{ docker_registry }}/rabbitmq:3.7-management
        ks_user: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        ks_service: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        ks_endpoints: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        cinder_api: {{ docker_registry }}/pike/ubuntu-source-cinder-api:3.6.0
        bootstrap: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        cinder_scheduler: {{ docker_registry }}/pike/ubuntu-source-cinder-scheduler:3.6.0
        cinder_volume: {{ docker_registry }}/pike/ubuntu-source-cinder-volume:3.6.0
        cinder_volume_usage_audit: {{ docker_registry }}/pike/ubuntu-source-cinder-volume:3.6.0
        cinder_storage_init: {{ docker_registry }}/ceph-config-helper:v1.10.3
        cinder_backup: {{ docker_registry }}/pike/ubuntu-source-cinder-backup:3.6.0
        cinder_backup_storage_init: {{ docker_registry }}/ceph-config-helper:v1.10.3
        dep_check: {{ docker_registry }}/kubernetes-entrypoint:v0.3.1
        image_repo_sync: {{ docker_registry }}/docker:17.07.0
      pull_policy: Always
    pod:
      user:
        cinder:
          uid: 42407
      replicas:
        api: 3
        backup: 1
        scheduler: 3
        volume: 1
    conf:
      logging:
        loggers:
          keys:
            - root
            - cinder
            - oslo_service
        logger_oslo_service:
          level: DEBUG
          handlers: stderr
          qualname: oslo_service
        logger_cinder:
          level: DEBUG
      ceph:
        enabled: true
        admin_keyring: "{{ admin_keyring }}"
      cinder:
        DEFAULT:
          debug: true
          backup_driver: cinder.backup.drivers.ceph
          backup_ceph_user: "cinder"
          backup_ceph_pool: "backups"
          osapi_volume_workers: 8
      backends:
        rbd1:
          volume_driver: cinder.volume.drivers.rbd.RBDDriver
          volume_backend_name: rbd1
          rbd_ceph_conf: "/etc/ceph/ceph.conf"
          rbd_flatten_volume_from_snapshot: false
          rbd_max_clone_depth: 5
          rbd_store_chunk_size: 4
          rados_connect_timeout: -1
          rbd_user: "cinder"
          rbd_pool: "volumes"
          rbd_secret_uuid: "582393ff-9a5c-4a2e-ae0d-86ec18c36afc"
    endpoints:
      oslo_db:
        auth:
          admin:
            username: {{ db_root_user }}
            password: {{ db_root_password }}
          cinder:
            username: cinder
            password: {{ db_cinder_password }}
  source:
    type: local
    location: "{{ osh_path }}"
    subpath: cinder
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: heat
data:
  chart_name: heat
  release: heat
  namespace: openstack
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
    pre:
      delete:
        - type: job
          labels:
            application: heat
            component: bootstrap
        - type: job
          labels:
            application: heat
            component: db-init
        - type: job
          labels:
            application: heat
            component: db-sync
        - type: job
          labels:
            application: heat
            component: ks-user
        - type: job
          labels:
            application: heat
            component: ks-service
        - type: job
          labels:
            application: heat
            component: ks-endpoints
  values:
    images:
      tags:
        test: {{ docker_registry }}/pike/ubuntu-source-rally:3.6.0
        bootstrap: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        db_init: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        heat_db_sync: {{ docker_registry }}/pike/ubuntu-source-heat-api:3.6.0
        db_drop: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        ks_user: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        ks_service: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        ks_endpoints: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        heat_api: {{ docker_registry }}/pike/ubuntu-source-heat-api:3.6.0
        heat_cfn: {{ docker_registry }}/pike/ubuntu-source-heat-api:3.6.0
        heat_cloudwatch: {{ docker_registry }}/pike/ubuntu-source-heat-api:3.6.0
        heat_engine: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        heat_engine_cleaner: {{ docker_registry }}/pike/ubuntu-source-heat-engine:3.6.0
        rabbit_init: {{ docker_registry }}/rabbitmq:3.7-management
        image_repo_sync: {{ docker_registry }}/docker:17.07.0
        dep_check: {{ docker_registry }}/kubernetes-entrypoint:v0.3.1
      pull_policy: Always
    pod:
      user:
        heat:
          uid: 42418
      replicas:
        api: 3
        cfn: 3
        cloudwatch: 3
        engine: 3
    endpoints:
      oslo_db:
        auth:
          admin:
            username: {{ db_root_user }}
            password: {{ db_root_password }}
          heat:
            username: heat
            password: {{ db_heat_password }}
  source:
    type: local
    location: "{{ osh_path }}"
    subpath: heat
  dependencies:
    - helm-toolkit
---
schema: armada/Chart/v1
metadata:
  schema: metadata/Document/v1
  name: horizon
data:
  chart_name: horizon
  release: horizon
  namespace: openstack
  install:
    no_hooks: false
  upgrade:
    no_hooks: false
  values:
    replicas: 1
    images:
      tags:
        db_init: {{ docker_registry }}/pike/ubuntu-source-horizon:3.6.0
        db_drop: {{ docker_registry }}/pike/ubuntu-source-horizon:3.6.0
        horizon_db_sync: {{ docker_registry }}/pike/ubuntu-source-horizon:3.6.0
        horizon: {{ docker_registry }}/pike/ubuntu-source-horizon:3.6.0
        image_repo_sync: {{ docker_registry }}/docker:17.07.0
        dep_check: {{ docker_registry }}/kubernetes-entrypoint:v0.3.1
      pull_policy: Always
    pod:
      replicas:
        server: 1
    network:
      node_port:
        enabled: true
        port: 31000
      api:
        ingress:
          annotations:
            nginx.ingress.kubernetes.io/proxy-body-size: 102400M
    conf:
      horizon:
        local_settings:
          config:
            openstack_neutron_network:
              enable_router: "True"
              enable_quotas: "True"
              enable_ipv6: "False"
              enable_distributed_router: "False"
              enable_ha_router: "False"
              enable_lb: "False"
              enable_firewall: "False"
              enable_vpn: "False"
              enable_fip_topology_check: "True"
    endpoints:
      oslo_db:
        auth:
          admin:
            username: {{ db_root_user }}
            password: {{ db_root_password }}
          horizon:
            username: horizon
            password: {{ db_horizon_password }}
  source:
    type: local
    location: "{{ osh_path }}"
    subpath: horizon
  dependencies:
    - helm-toolkit
---
schema: armada/ChartGroup/v1
metadata:
  schema: metadata/Document/v1
  name: openstack-infra
data:
  description: "Openstack Infrastructure"
  sequenced: False
  chart_group:
    - ceph-provisioners
    - ingress
    - etcd
    - rabbitmq
    - memcached
    - mariadb
---
schema: armada/ChartGroup/v1
metadata:
  schema: metadata/Document/v1
  name: openstack-services
data:
  description: "Openstack Services"
  sequenced: False
  chart_group:
    - libvirt
    - openvswitch
    - keystone
    - glance
    - cinder
    - heat
    - nova
    - neutron
    - horizon
---
schema: armada/Manifest/v1
metadata:
  schema: metadata/Document/v1
  name: ha-manifest
data:
  release_prefix: ha
  chart_groups:
    - openstack-infra
    - openstack-services
