---

- include_vars: ../vars/main.yml

- name: ensures /tmp/manifests dir exists
  file: path=/tmp/manifests state=directory

- name: copy tiller deploy yml
  template:
    src: "{{item.file}}.j2"
    dest: "/tmp/manifests/{{item.file}}"
  with_items:
    - {name: "tiller-deploy", file: tiller-deploy-nodeport.yml, type: service}
  register: manifests

- name: create nodeport for tiller
  kube:
    name: "{{item.item.name}}"
    kubectl: "{{bin_dir}}/kubectl"
    resource: "{{item.item.type}}"
    filename: "/tmp/manifests/{{item.item.file}}"
    state: "{{item.changed | ternary('latest','present') }}"
  with_items:
    - "{{ manifests.results }}"
  become: no

- name: yum install packages required for armada
  yum:
    name: "{{ item }}"
    state: present
  loop:
    - epel-release
    - python34-pip
    - python34-devel
    - gcc
    - jq
    - git
  when: ansible_distribution in ["CentOS","RedHat"]

- name: apt install packages required for armada
  apt_repository:
    repo: ppa:deadsnakes/ppa
    state: present
  when: ansible_distribution in ["Ubuntu","Debian"]

- name: apt install packages required for armada
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - python3.4
    - python3-pip
    - python3-dev
    - gcc
    - jq
  when: ansible_distribution in ["Ubuntu","Debian"]

- name: install virtual env packages
  pip:
    name: "{{ item }}"
    state: present
  loop:
    - virtualenv
    - virtualenvwrapper
    - pbr

- name: update bashrc for running virtual env and armada
  blockinfile:
    path: "{{ lookup('env','HOME') }}/.bashrc"
    block: |
      export LC_ALL="en_US.UTF-8"
      export WORKON_HOME={{ workon_home }}
      source /usr/bin/virtualenvwrapper.sh
      export OSH_PATH="{{ playbook_dir }}/charts"
    marker: "# ARMADA ENVS {mark}"
  become: no  
  when: ansible_distribution in ["CentOS","RedHat"]

- name: update bashrc for running virtual env and armada
  blockinfile:
    path: "{{ lookup('env','HOME') }}/.bashrc"
    block: |
      export LC_ALL="en_US.UTF-8"
      export WORKON_HOME={{ workon_home }}
      source /usr/local/bin/virtualenvwrapper.sh
      export OSH_PATH="{{ playbook_dir }}/charts"
    marker: "# ARMADA ENVS {mark}"
  become: no
  when: ansible_distribution in ["Ubuntu","Debian"]

# FIXME: this does not work in Ubuntu machine
- name: get existing workon armada
  shell: >-
    . {{ lookup('env','HOME') }}/.bashrc &&
    lsvirtualenv | grep armada | cat
  register: workon_armada
  become: no

# FIXME: this does not work in Ubuntu machine
# please create virtualenv with name armada manually to proceed
- name: create workon armada if not exist
  shell: >-
    . {{ lookup('env','HOME') }}/.bashrc &&
    mkvirtualenv armada --python=/usr/bin/python3.4
  become: no
  when: workon_armada.stdout == ""

- name: install required packages for armada in virtual env
  pip:
    requirements: "{{ playbook_dir }}/armada/requirements.txt"
    virtualenv: "{{ workon_home }}/armada"
    virtualenv_python: python3.4
  become: no

- name: install armada in the virtual env
  args:
    chdir: "{{ playbook_dir }}/armada"
  command: >-
    "{{ workon_home }}/armada/bin/python3.4"
    setup.py install
  become: no
