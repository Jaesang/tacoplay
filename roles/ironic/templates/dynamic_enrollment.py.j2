#!/usr/bin/env python


from ironicclient import client
import os
import subprocess
import sys

if os.environ.get('OS_AUTH_TOKEN'):
    OS_AUTH_TOKEN = os.environ['OS_AUTH_TOKEN']
else:
    OS_AUTH_TOKEN = 'fake-token'
if os.environ.get('IRONIC_URL'):
    IRONIC_URL = os.environ['IRONIC_URL']
else:
    IRONIC_URL = 'http://{{ ironic_server }}:6385'

FILENAME = "{{ lookup('env','HOME') }}/ironic_scripts/nodes.txt"
IRONIC_DRIVERS = ["pxe_ipmitool", "pxe_drac", "pxe_ilo"]
DEPLOY_KERNEL = "file://{{ tftp_path }}/ironic_images/ubuntu-deploy/{{ deploy_kernel }}"
DEPLOY_RAMDISK =  "file://{{ tftp_path }}/ironic_images/ubuntu-deploy/{{ deploy_ramdisk }}"
USER_KERNEL = "file://{{ tftp_path }}/ironic_images/ubuntu-bionic-user/{{ user_kernel }}"
USER_RAMDISK = "file://{{ tftp_path }}/ironic_images/ubuntu-bionic-user/{{ user_ramdisk }}"
USER_IMAGE = "file://{{ tftp_path }}/ironic_images/ubuntu-bionic-user/{{ user_image }}"
USER_IMAGE_CHECKSUM = "{{ user_image_checksum }}"


def generate_nodes_dict_from_file():
    nodes_dict = []
    if not os.path.isfile(FILENAME):
        print('%s does not exists.' % FILENAME)
        sys.exit()
    with open(FILENAME, 'r') as f:
        try:
            lines = f.readlines()
            for line in lines:
                a = line.strip().split()
                node_dict = {
                    'name': a[0],
                    'driver': a[1],
                    'driver_address': a[2],
                    'driver_username': a[3],
                    'driver_password': a[4],
                    'mac_address': a[5],
                }
                nodes_dict.append(node_dict)
            return nodes_dict
        except IndexError:
            print('No contents or wrong keys in %s.' % FILENAME)
            sys.exit()
        except Exception:
            print('There are some problems parsing node text file.')
            sys.exit()


def do_create_node(ironic, node):
    if node['driver'] not in IRONIC_DRIVERS:
        print('%s is not supported in tacoplay BM playbook now.' % node['driver'])
        sys.exit()
    if node['driver'] == 'pxe_ipmitool':
        kwargs = {
            'name': node['name'],
            'driver': node['driver'],
            'driver_info': {
                'ipmi_address': node['driver_address'],
                'ipmi_username': node['driver_username'],
                'ipmi_password': node['driver_password'],
                'deploy_kernel': DEPLOY_KERNEL,
                'deploy_ramdisk': DEPLOY_RAMDISK,
            },
        }
    elif node['driver'] == 'pxe_drac':
        kwargs = {
            'name': node['name'],
            'driver': node['driver'],
            'driver_info': {
                'drac_address': node['driver_address'],
                'drac_username': node['driver_username'],
                'drac_password': node['driver_password'],
                'deploy_kernel': DEPLOY_KERNEL,
                'deploy_ramdisk': DEPLOY_RAMDISK,
            },
        }
    elif node['driver'] == 'pxe_ilo':
        kwargs = {
            'name': node['name'],
            'driver': node['driver'],
            'driver_info': {
                'ilo_address': node['driver_address'],
                'ilo_username': node['driver_username'],
                'ilo_password': node['driver_password'],
                'deploy_kernel': DEPLOY_KERNEL,
                'deploy_ramdisk': DEPLOY_RAMDISK,
            },
        }
    result = ironic.node.create(**kwargs)
    return result.uuid


def do_create_port(ironic, node, uuid):
    kwargs = {
        'address': node['mac_address'],
        'node_uuid': uuid,
    }
    ironic.port.create(**kwargs)
  

def do_update_instance_info(ironic, uuid):
    params = [
        {"path": "/instance_info/kernel", "value": USER_KERNEL, "op": "add"}, 
        {"path": "/instance_info/ramdisk", "value": USER_RAMDISK, "op": "add"},
        {"path": "/instance_info/image_source", "value": USER_IMAGE, "op": "add"},
        {"path": "/instance_info/image_checksum", "value": USER_IMAGE_CHECKSUM, "op": "add"},
        {"path": "/instance_info/root_gb", "value": 10, "op": "add"},
    ]
    ironic.node.update(uuid, params)


def do_update_node_state(ironic, uuid, state):
    ironic.node.set_provision_state(uuid, state)


def main():
    kwargs = {'os_auth_token': OS_AUTH_TOKEN, 'ironic_url': IRONIC_URL}
    ironic = client.get_client(1, **kwargs)

    file_nodes = generate_nodes_dict_from_file()

    ironic_nodes = ironic.node.list()

    node_name_list = [i.name for i in ironic_nodes]
    for node in file_nodes:
        if node['name'] not in node_name_list:
            uuid = do_create_node(ironic, node)
            do_create_port(ironic, node, uuid)
            do_update_instance_info(ironic, uuid)
            do_update_node_state(ironic, uuid, 'manage')
            do_update_node_state(ironic, uuid, 'provide')
        

if __name__ == '__main__':
    main()

