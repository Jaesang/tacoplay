---
- name: ensures /tmp/manifests dir exists
  file: path=/tmp/manifests state=directory

- name: copy namespace, clusterrolebinding yml
  template:
    src: "{{item.file}}.j2"
    dest: "/tmp/manifests/{{item.file}}"
  with_items:
    - {name: "{{ openstack_namespace }}", file: namespace.yml, type: namespace}
    - {name: "{{ openstack_namespace }}", file: clusterrolebinding.yml, type: clusterrolebinding}
  register: openstack_manifests

- name: fetch mon hosts from ceph.conf
  shell: >-
    grep 'mon host' /etc/ceph/ceph.conf | awk '{print $4}'
  register: mon
  when: not (mon_host|length > 0)

- name: set fact mon_host for armada-manifest.yml
  set_fact:
    mon_host: "{{ mon.stdout }}"
  when: mon.changed and mon.stdout != ""

- name: failed to get ceph mon hosts
  fail:
    msg: "failed to get ceph mon hosts neither from vars nor ceph.conf"
  when: not (mon_host|length > 0)

- name: set fact monitors for ceph storage class
  set_fact:
    monitors: "{{ mon_host.split(',') | map('regex_replace', '(.*)', '\\1:6789') | join(',') }}"

- name: fetch admin keyring from ceph.client.admin.keyring
  shell: >-
    grep key /etc/ceph/ceph.client.admin.keyring | awk '{print $3}' | xargs echo -n
  register: keyring
  when: not (admin_keyring|length > 0)

- name: set fact admin_keyring for armada-manifest.yml
  set_fact:
    admin_keyring: "{{ keyring.stdout }}"
  when: keyring.changed and keyring.stdout != ""

- name: failed to get ceph admin keyring
  fail:
    msg: "failed to get admin keyring neither from vars nor /etc/ceph"
  when: not (admin_keyring|length > 0)

- name: encode admin keyring with base64
  shell: echo -n {{ admin_keyring }} | base64
  register: keyring_base64

- name: set fact admin_keyring_base64 for ceph-secret-admin
  set_fact:
    admin_keyring_base64: "{{ keyring_base64.stdout }}"
  when: keyring_base64.stdout != ""

- name: encode kube user keyring with base64
  shell: echo -n {{ user_keyring }} | base64
  register: keyring_base64

- name: set fact user_keyring_base64 for ceph-secret-user
  set_fact:
    user_keyring_base64: "{{ keyring_base64.stdout }}"
  when: keyring_base64.stdout != ""

- name: copy ceph secret and storageclass yml
  template:
    src: "{{item.file}}.j2"
    dest: "/tmp/manifests/{{item.file}}"
  with_items:
    - {name: "{{ user_secret_name }}", file: ceph-secret-user.yml, type: secret}
    - {name: "{{ admin_secret_name }}", file: ceph-secret-admin.yml, type: secret}
    - {name: "{{ storageclass_name }}", file: ceph-storageclass.yml, type: storageclass}
  register: ceph_manifests
  when: ceph_enabled

- name: start k8s resources for taco
  kube:
    name: "{{item.item.name}}"
    kubectl: "{{bin_dir}}/kubectl"
    resource: "{{item.item.type}}"
    filename: "/tmp/manifests/{{item.item.file}}"
    state: "{{item.changed | ternary('latest','present') }}"
  with_items:
    - "{{ openstack_manifests.results }}"
    - "{{ ceph_manifests.results }}"
  run_once: true
  become: no

- name: check armada-manifest.yml.j2 exists
  stat:
    path: "{{ inventory_dir }}/armada-manifest.yaml.j2"
  register: stat_result

- name: create armada-manifest.yml
  template:
    src: "{{ inventory_dir }}/armada-manifest.yaml.j2"
    dest: "{{ inventory_dir }}/armada-manifest.yaml"
  run_once: true
  when: stat_result.stat.exists

- name: install packages required for openstack client packages
  yum:
    name: "{{ item }}"
    state: present
  loop:
    - gcc
    - python-devel
  when:
    - ansible_distribution in ["CentOS","RedHat"]

- name: install python-openstackclient
  pip:
    name: "{{ item.name }}"
    version: "{{ item.version }}"
    state: present
  loop:
    - { name: 'python-openstackclient', version: '3.16.0' }
    - { name: 'python-cinderclient', version: '3.1.0' }
    - { name: 'python-glanceclient', version: '2.8.0' }
    - { name: 'python-keystoneclient', version: '3.17.0' }
    - { name: 'python-novaclient', version: '9.1.2' }

- name: update bashrc for openstack client configs
  blockinfile:
    path: "{{ lookup('env','HOME') }}/.bashrc"
    block: |
      export OS_AUTH_URL={{ os_auth_url }}
      export OS_IDENTITY_API_VERSION=3
      export OS_IMAGE_API_VERSION=2
      export OS_PROJECT_DOMAIN_NAME={{ os_project_domain }}
      export OS_USER_DOMAIN_NAME={{ os_user_domain }}
      export OS_PROJECT_NAME={{ os_project_name }}
      export OS_USERNAME={{ os_user_name }}
      export OS_PASSWORD={{ os_password }}
    marker: "# OPENSTACK CLIENT ENVS {mark}"
  become: no
