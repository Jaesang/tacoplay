---

- name: check host where tiller is running
  shell: >-
    {{ bin_dir }}/kubectl get pods -n kube-system -o json |
    jq -r '.items[] | select(.metadata.name|test("tiller")).status.hostIP'
  register: tiller_host
  become: no

- name: delete armada lock
  shell: >-
    {{ bin_dir }}/kubectl delete lock --all -n kube-system
  become: no
  ignore_errors: yes

- name: get existing armada processes
  shell: >-
    ps -ef | grep -v grep | grep -w 'armada apply' | awk '{print $2}'
  register: armada_processes
  become: no

- name: kill existing armada processes
  shell: kill {{ item }}
  with_items: "{{ armada_processes.stdout_lines }}"
  become: no

- name: wait until existing armada processes are killed
  wait_for:
    path: "/proc/{{ item }}/status"
    state: absent
  with_items: "{{ armada_processes.stdout_lines }}"

- name: run armada docker container
  docker_container:
    name: "armada"
    image: "{{ armada_image_name }}:{{ armada_image_tag }}"
    volumes: 
      - "{{ lookup('env','HOME') }}/:{{ lookup('env','HOME') }}/"
      - "{{ lookup('env','HOME') }}/.kube:/armada/.kube/"
    restart_policy: always
    state: started

- name: run armada apply 
  shell: >-
    docker exec armada armada apply
    --tiller-host {{ tiller_host.stdout }}
    --tiller-port {{ tiller_port }}
    --timeout 7200
    {{ inventory_dir }}/{{ item }}-manifest.yml >
    {{ lookup('env','HOME') }}/{{ item }}-deployment.log
  when: auto_release_enabled|default(true) and tiller_host.stdout != ""
  become: no
  args:
    executable: /bin/bash
  run_once: yes
  with_items: taco_apps

- name: show armada apply usage for next try
  debug:
    msg: >-
      "docker exec armada armada apply
      --tiller-host {{ tiller_host.stdout }}
      --tiller-port {{ tiller_port }}
      --timeout 7200
      {{ inventory_dir }}/[YOUR_APP]-manifest.yaml"
  when: tiller_host.stdout != ""
