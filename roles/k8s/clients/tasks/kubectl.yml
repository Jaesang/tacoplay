---
- name: create kube config dir
  file:
    path: "{{ lookup('env','HOME') }}/.kube"
    mode: "0700"
    state: directory
  become: no

- name: copy kubectl binary to ansible host
  fetch:
    src: "{{ bin_dir }}/kubectl"
    dest: "{{ artifacts_dir }}/kubectl"
    flat: yes
    validate_checksum: no
  delegate_to: "{{ groups['kube-master']|first }}"

- name: copy kubectl to bin_dir
  copy:
    src: "{{ artifacts_dir }}/kubectl"
    dest: "{{ bin_dir }}/kubectl"
    mode: 0755

- name: check whether .bashrc contains PATH
  command: grep -Frn "export PATH=" {{ lookup('env','HOME') }}/.bashrc
  register: checkpath
  ignore_errors: True
  changed_when: False

- name: add PATH into bashrc
  lineinfile:
    dest: "{{ lookup('env','HOME') }}/.bashrc"
    state: present
    line: 'export PATH=$PATH:{{bin_dir}}'
  when: not checkpath.rc == 0

- name: add {{ bin_dir }} to PATH
  lineinfile:
    path: "{{ lookup('env','HOME') }}/.bashrc"
    state: present
    regexp: 'export PATH=(["]*)((?!.*?{{bin_dir}}).*?)(["]*)$'
    line: 'export PATH=\1\2:{{bin_dir}}\3'
    backrefs: yes
  become: no
  when: checkpath.rc == 0

- name: source bashrc
  become: no
  shell: source {{ lookup('env','HOME') }}/.bashrc
  args:
    executable: /bin/bash

- name: check if new cluster already exists in .kube/config 
  become: no
  shell: >-
    KUBECONFIG={{ lookup('env','HOME') }}/.kube/config {{ bin_dir }}/kubectl config get-clusters | grep {{ cluster_name }}
  register: cluster_registered
  ignore_errors: True

- name: merge new cluster config with .kube/config
  become: no
  shell: >-
    {{ bin_dir }}/kubectl config view --merge --flatten
  register: merged_kube_config
  environment:
    KUBECONFIG: "{{ lookup('env', 'HOME') }}/.kube/config:{{ artifacts_dir }}/admin.conf"
  when: not cluster_registered.rc == 0

- name: copy merged_config into .kube/config
  become: no
  copy: content="{{ merged_kube_config.stdout }}" dest="{{ lookup('env', 'HOME') }}/.kube/config"
  
  
