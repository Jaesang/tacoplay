---
- name: ensure docker-ce repository public key is installed
  action: "{{ docker_repo_key_info.pkg_key }}"
  args:
    id: "{{item}}"
    url: "{{docker_repo_key_info.url}}"
    state: present
  register: keyserver_task_result
  until: keyserver_task_result is succeeded
  retries: 4
  with_items: "{{ docker_repo_key_info.repo_keys }}"
  when: not (ansible_os_family in ["CoreOS", "Container Linux by CoreOS", "RedHat", "Suse"])

- name: ensure docker-ce repository is enabled
  action: "{{ docker_repo_info.pkg_repo }}"
  args:
    repo: "{{item}}"
    state: present
  with_items: "{{ docker_repo_info.repos }}"
  when: not (ansible_os_family in ["CoreOS", "Container Linux by CoreOS", "RedHat", "Suse"]) and (docker_repo_info.repos|length > 0)

- name: Configure docker repository on RedHat/CentOS
  template:
    src: "rh_docker.repo.j2"
    dest: "{{ yum_repo_dir }}/docker.repo"
  when: ansible_distribution in ["CentOS","RedHat"] and not is_atomic

- name: Copy yum.conf for editing
  copy:
    src: "{{ yum_conf }}"
    dest: "{{ docker_yum_conf }}"
    remote_src: yes
  when: ansible_distribution in ["CentOS","RedHat"] and not is_atomic

- name: Edit copy of yum.conf to set obsoletes=0
  lineinfile:
    path: "{{ docker_yum_conf }}"
    state: present
    regexp: '^obsoletes='
    line: 'obsoletes=0'
  when: ansible_distribution in ["CentOS","RedHat"] and not is_atomic

- name: ensure docker packages are installed
  action: "{{ docker_package_info.pkg_mgr }}"
  args:
    pkg: "{{item.name}}"
    force: "{{item.force|default(omit)}}"
    conf_file: "{{item.yum_conf|default(omit)}}"
    state: present
    update_cache: "{{ omit if ansible_distribution == 'Fedora' else True }}"
  register: docker_task_result
  until: docker_task_result is succeeded
  retries: 4
  with_items: "{{ docker_package_info.pkgs }}"
  notify: restart docker
  when: not (ansible_os_family in ["CoreOS", "Container Linux by CoreOS"]) and (docker_package_info.pkgs|length > 0)
  ignore_errors: true

- name: get available packages on Ubuntu
  command: apt-cache policy docker-ce
  when:
    - docker_task_result is failed
    - ansible_distribution == 'Ubuntu'
  register: available_packages

- name: show available packages on ubuntu
  fail:
    msg: "{{available_packages}}"
  when:
    - docker_task_result is failed
    - ansible_distribution == 'Ubuntu'

# This is required to ensure any apt upgrade will not break kubernetes
- name: Set docker pin priority to apt_preferences on Debian family
  template:
    src: "debian_docker.j2"
    dest: "/etc/apt/preferences.d/docker"
    owner: "root"
    mode: 0644
  when: not (ansible_os_family in ["CoreOS", "Container Linux by CoreOS", "RedHat", "Suse"])

- name: ensure service is started if docker packages are already present
  service:
    name: docker
    state: started
  when: docker_task_result is not changed

- name: flush handlers so we can wait for docker to come up
  meta: flush_handlers

- name: set fact for docker_version
  command: "docker version -f '{{ '{{' }}.Client.Version{{ '}}' }}'"
  register: installed_docker_version
  changed_when: false

- name: Create docker service systemd directory if it doesn't exist
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory

- name: Write docker.service systemd file
  template:
    src: docker.service.j2
    dest: /etc/systemd/system/docker.service
  register: docker_service_file
  notify: restart docker
  when: not (ansible_os_family in ["CoreOS", "Container Linux by CoreOS"] or is_atomic)

- name: Write docker options systemd drop-in
  template:
    src: docker-options.conf.j2
    dest: "/etc/systemd/system/docker.service.d/docker-options.conf"
  notify: restart docker

- name: flush handlers so we can wait for docker to come up
  meta: flush_handlers

- name: ensure docker service is started and enabled
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
    - docker
