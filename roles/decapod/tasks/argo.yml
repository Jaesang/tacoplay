---
- name: create namespace to deploy argo
  shell: >-
    {{ bin_dir }}/kubectl create namespace argo
  ignore_errors: true
  become: false

- name: install argo chart
  shell: >-
    {{ bin_dir }}/helm install argo {{ argo_chart_source }} -n argo \
    --set workflowArchive.enabled={{ argo_workflow_archive_enabled }} \
    --set mysql.enabled={{ argo_workflow_archive_enabled }} \
    --set workflowController.image.repository={{ argo_workflow_controller_image_repo }} \
    --set workflowController.executor.image.repository={{ argo_workflow_executor_image_repo }} \
    --set argoServer.image.repository={{ argo_server_image_repo }} \
    --set mysql.persistence.storageClass={{ storage_class_name }} \
    --set mysql.persistence.size={{ argo_archive_storage_size }} 
  become: false

- name: wait for argo pods become ready
  shell: >-
    {{ bin_dir }}/kubectl wait --namespace=argo --for=condition=Ready pods -l app={{ item }} --timeout=600s
  become: false
  with_items:
    - argo-server
    - workflow-controller

- name: check argo client exists
  stat:
    path: "{{ bin_dir }}/argo"
  register: stat_result

- name: install argo client
  shell: >-
    cd /tmp && curl -sLO {{ argo_client_url }} && chmod +x {{ argo_client_binary_name }} && mv ./{{ argo_client_binary_name }} {{ bin_dir }}/argo
  become: true
  when: not stat_result.stat.exists

- name: granting admin privileges into default serviceaccount
  shell: >-
    {{ bin_dir }}/kubectl create rolebinding default-admin --clusterrole=admin --serviceaccount=default:default
  become: false
  ignore_errors: True
