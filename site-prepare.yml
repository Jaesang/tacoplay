---

# Copy site.yml from site.yml.sample
- hosts: localhost
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  tasks:
    - name: copy site.yml
      copy:
        src: "{{ playbook_dir }}/ceph-ansible/site.yml.sample"
        dest: "{{ playbook_dir }}/ceph-ansible/site.yml"
  tags: ceph

- hosts: localhost
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: taco-defaults }
    - { role: docker }
  tasks:
    - name: ensure a list of packages installed
      yum:
        name: jq
    - pip:
        name: yq
    - pip:
        name: docker
  tags: download

- hosts: localhost
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  tasks:
    - name: download images for kubespray
      args:
        chdir: "{{ playbook_dir }}"
      shell: >-
        ansible-playbook -b -i inventory/preparation/local.ini kubespray/cluster.yml
        --tags download --skip-tags upload,upgrade
      become: no
  tags: download

- hosts: localhost
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  tasks:
    - name: pull k8s-dashboard image
      docker_image:
        name: gcr.io/google_containers/kubernetes-dashboard-amd64:v1.8.3

    - name: registry.cicd.stg.taco | populate custom entries into hosts file
      lineinfile:
        path: /etc/hosts
        line: 192.168.54.30 registry.cicd.stg.taco
        state: present

    - name: create docker cert directory
      file:
        path: /etc/docker/certs.d/registry.cicd.stg.taco/
        state: directory
        mode: 0755

    - name: copy registry cert file
      copy:
        src: "{{ playbook_dir }}/files/registry-certs"
        dest: "/etc/docker/certs.d/registry.cicd.stg.taco/ca.crt"

    - name: pull all images used in armada manifest
      script: >-
        {{ playbook_dir }}/scripts/pull-images.sh
        {{ ansible_inventory_sources[0] | dirname }}/armada-manifest.yaml
      args:
        creates: /tmp/.image-pull-done

    - name: run registry container
      docker_container:
        name: taco-registry
        image: registry:2.6.2
        restart_policy: always
        ports:
          - 5000:5000
        volumes:
          - "{{ playbook_dir }}/docker_registry/:/var/lib/registry"

    - name: tag images
      script: "{{ playbook_dir }}/scripts/tag-images.sh"
      args:
        creates: /tmp/.image-tag-done

    - name: push tagged images to registry
      script: "{{ playbook_dir }}/scripts/push-images.sh"
      args:
        creates: /tmp/.image-push-done

    - name: archive registry image
      docker_image:
        name: registry
        tag: 2.6.2
        archive_path: "{{ playbook_dir }}/docker_registry/registry-2.6.2.tar"

    - name: bundle up tacoplay
      shell: tar cvfz tacoplay.tar.gz tacoplay/
      args:
        chdir: "{{ playbook_dir | dirname }}"
        creates: /tmp/.bundle-done
  tags: download
