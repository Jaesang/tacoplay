---

# Copy site.yml from site.yml.sample
- hosts: localhost
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  tasks:
    - name: copy site.yml
      copy:
        src: "{{ playbook_dir }}/ceph-ansible/site.yml.sample"
        dest: "{{ playbook_dir }}/ceph-ansible/site.yml"
  tags: always

- hosts: localhost:all
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  tasks:
    - name: use cicd registry and disable localrepo
      set_fact:
        cicd_registry_enabled: true
        localrepo_enabled: false

    - name: include global override files
      include_vars: "{{ item }}"
      loop:
        - "{{ playbook_dir }}/vars/global_taco.yml"
        - "{{ playbook_dir }}/vars/global_docker.yml"
        - "{{ playbook_dir }}/vars/global_ceph.yml"
        - "{{ playbook_dir }}/vars/global_k8s-cluster.yml"
  tags: always

- hosts: localhost
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: docker }
  tasks:
    - name: ensure a list of packages installed
      yum:
        name: jq
    - pip:
        name: yq
    - pip:
        name: docker
  tags: download

- hosts: localhost
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: populate-ceph-vars, when: taco_storage == 'ceph' }
  tags: always

- include: kubespray/cluster.yml

- hosts: localhost
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  tasks:
    - name: create docker cert directory
      file:
        path: /etc/docker/certs.d/registry.cicd.stg.taco/
        state: directory
        mode: 0755

    - name: copy registry cert file
      copy:
        src: "{{ playbook_dir }}/files/registry-certs"
        dest: "/etc/docker/certs.d/registry.cicd.stg.taco/ca.crt"

    - name: pull additional images
      docker_image:
        name: "{{ item }}"
      with_items:
        - "quay.io/external_storage/rbd-provisioner:v2.1.1-k8s1.11"
        - "registry.cicd.stg.taco/yaml-merge:latest"

    - name: check if {{ armada_manifest }} exists
      stat:
        path: "{{ armada_manifest }}"
      register: stat_result
    
    - name: copy .netrc file to home directory
      copy:
        src: "{{ playbook_dir }}/files/.netrc"
        dest: "~/.netrc"
      become: no

    - name: clone vslab-inventories
      git:
        repo: 'https://tde.sktelecom.com/stash/scm/oreotools/vslab-inventories.git'
        dest: "{{ playbook_dir }}/vslab-inventories"
        version: master

    - name: copy extra-vars from {{ site_name }} inventories
      copy:
        src: "{{ playbook_dir }}/vslab-inventories/{{ site_name }}/extra-vars.yml"
        dest: "{{ inventory_dir }}/extra-vars.yml"
      become: no

    - name: include vars for prepare_manifest task
      include_vars: roles/armada/apply/defaults/main.yml

    - name: prepare armada_manifest for image pulling
      include_tasks: roles/armada/apply/tasks/prepare-manifest.yml
      vars:
        openstack_release: "{{ openstack_release }}"

    - name: render armada_manifest with ceph vars assigned
      include_tasks: roles/armada/apply/tasks/render-manifest.yml
      vars:
        openstack_release: "{{ openstack_release }}"
      when: taco_storage == 'ceph'

    # Should I run fetch-sub-projects.sh here instead of Jenkinsfile?
    - name: pull all images used in armada manifest
      script: >-
        {{ playbook_dir }}/scripts/pull-images.sh
        {{ armada_manifest }}
      args:
        creates: /tmp/.image-pull-done

    - name: run registry container
      docker_container:
        name: taco-registry
        image: registry:2.6.2
        restart_policy: always
        ports:
          - 5000:5000
        volumes:
          - "{{ playbook_dir }}/docker_registry/:/var/lib/registry"

    - name: tag images
      script: "{{ playbook_dir }}/scripts/tag-images.sh"
      args:
        creates: /tmp/.image-tag-done

    - name: push tagged images to registry
      script: "{{ playbook_dir }}/scripts/push-images.sh"
      args:
        creates: /tmp/.image-push-done

    - name: archive registry image
      docker_image:
        name: registry
        tag: 2.6.2
        archive_path: "{{ playbook_dir }}/docker_registry/registry-2.6.2.tar"

    - name: bundle up tacoplay
      shell: tar cvfz tacoplay.tar.gz tacoplay/
      args:
        chdir: "{{ playbook_dir | dirname }}"
        creates: /tmp/.bundle-done
  tags: download
